<?xml version="1.0" encoding="UTF-8"?>
<!-- 此文件用于 mvc驱动，路径jsp前后缀添加 ，文件上传，扫描注解 -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:amq="http://activemq.apache.org/schema/core"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd 
		http://www.springframework.org/schema/aop 
    	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
    	http://www.springframework.org/schema/jms 
    	http://www.springframework.org/schema/jms/spring-jms.xsd 
    	http://activemq.apache.org/schema/core 
    	http://activemq.apache.org/schema/core/activemq-core.xsd 
    	http://www.springframework.org/schema/tx 
    	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">


	
	<!-- ================================================================================================ -->
	<!-- 启用spring mvc 注解扫描，  相当于HandlerAndMapping 和 MappingAndResolve -->
	<mvc:annotation-driven/>
	
	
	
	<!-- ================================================================================================ -->
	<!-- 扫描设置使用注解的类所在的jar包 -->
	<context:component-scan base-package="com.ljw.*"></context:component-scan>
	
	
	
	<!-- ================================================================================================ -->
	<!-- 静态资源识别设置，如果需要jsp识别js,css,html,gif..等等，需要添加此备注，具体原因看web中解决办法总结 -->
	<mvc:default-servlet-handler/>
	
	
	
	<!-- ================================================================================================ -->
	<!-- 补全路径，处理请求转发配置 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/pages/"></property>
		<property name="suffix" value=".jsp"></property>
		<!-- JSTL标签配置 -->
<!-- 		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property> -->
	</bean>
	
	
	
	<!-- ================================================================================================ -->
	<!-- 拦截器 ,配置多个拦截器，依次执行 -->
	<mvc:interceptors>
		
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.ljw.spring.mybits.interceptor.Interceptor1"></bean>		
		</mvc:interceptor>
		
		<mvc:interceptor>
			<mvc:mapping path="/private/**"/>
			<bean class="com.ljw.spring.mybits.interceptor.Interceptor2"></bean>
		</mvc:interceptor>
		
	</mvc:interceptors>
	


	<!-- ================================================================================================ -->
	<!-- 配置Aspect -->
	
	<!-- 方法一.创建bean配置 -->
	<!-- 1.配置方面组件 -->
	<!-- 	<bean id="operatorLogger" class="com.ljw.spring.mybits.aspect.OperatorLogger"></bean> -->

	<!-- 2.配置aop -->
	<!-- 	<aop:config> -->
	<!-- 		<aop:aspect ref="operatorLogger"> -->
	<!-- 			<aop:before method="log1" -->
	<!-- 				pointcut="within(com.ljw.spring.mybits.controller..*)"></aop:before> -->
	<!-- 		</aop:aspect> -->
	<!-- 	</aop:config> -->
	
	<!-- 方法二：自动扫描aop配置 （需要1.在对应的方面类上@Component,@Aspect;2.在对应的方法上面加上@Before("within(com.ljw.spring.mybits.controller..*)")）-->
	<aop:aspectj-autoproxy  proxy-target-class="true"/>
	
	<!-- ================================================================================================ -->
	<!-- 配置MyBatis -->

	<!-- 1.配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="url" value="jdbc:mysql://localhost:3306/testdb"></property>
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="username" value="root"></property>
		<property name="password" value="1988ljw"></property>
	</bean>

	<!-- 2.配置SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath:voxml/*.xml"></property>
	</bean>

	<!-- 3.配置MyBatis 注解模式 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ljw.spring.mybits.dao"></property>
		<property name="annotationClass"
			value="com.ljw.spring.mybits.annotation.MyBatisRepository"></property>
	</bean>
	
	<!-- ================================================================================================ -->
	<!-- 配置事物：注解实现的事物配置 -->
	
	<!-- 1.声明事物管理组件 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 2.方法一：开启事物注解扫描 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<!-- 2.方法二：进行xml配置 -->
<!-- 	<tx:advice id="txAdvice" transaction-manager="transactionManager"> -->
<!-- 		<tx:attributes> -->
<!-- 			<tx:method name="find*" read-only="true"/> -->
<!-- 			<tx:method name="add*" propagation="REQUIRED"  -->
<!-- 				rollback-for="java.lang.ClassNotFoundException"/> -->
<!-- 			<tx:method name="update*" propagation="REQUIRED"/> -->
<!-- 			<tx:method name="delete*" propagation="REQUIRED"/> -->
<!-- 		</tx:attributes> -->
<!-- 	</tx:advice> -->
<!-- 	<aop:config proxy-target-class="true"> -->
<!-- 		<aop:advisor advice-ref="txAdvice" -->
<!-- 			pointcut="within(com.ljw.spring.mybits.controller..*)"/> -->
<!-- 	</aop:config> -->


	<!-- ================================================================================================ -->
	<!-- 上传文件解析器 -->
	
	
	
	<!-- ================================================================================================ -->
	<!-- 使用jms发送消息，缺点是同步的 -->
	
	
	<!--创建连接工厂 ：
		使用ActiveMQ自己的spring命名空间来声明链接工厂org.apache.activemq.spring.ActiveMQConnectionFactory，
		创建 bean，通过brokerURL来告知连接工厂消息代理的位置（此处告知系统连接工厂要连接到本地机器的61616端口（ActiveMQ监听默认端口））
		
		如果使用不同的消息代理，它们不一定会提供spring配置的命名空间，如果没有提供，那我们就需要使用bean来装配
	-->
	<amq:connectionFactory id="connectionFactory" brokerURL="tcp://localhost:61616"/>
	
	<!--创建消息目的地 
		可以是一个队列，也可以是一个主题通过class不同配置
		topic:class="org.apache.activemq.command.ActiveMQTopic"
		queue:class="org.apache.activemq.command.ActiveMQQueue"
		physicalName为主题的字段
		此处为一个队列
	-->
<!-- 	<bean id="studentTopic" class="org.apache.activemq.command.ActiveMQTopic"> -->
<!-- 		<property name="physicalName" value="spittle.alert.queue"></property> -->
<!-- 	</bean> -->
	<amq:queue id="studentTopic" physicalName="spittle.alert.queue"></amq:queue>
	
	<!-- 创建jms模板，提供连接支持，封装了类似http请求或者数据库请求的连接创建过程 -->
	<bean id="jmsTemplate"
		class="org.springframework.jms.core.JmsTemplate">
		<constructor-arg ref="connectionFactory"></constructor-arg>
	</bean>
	
	<bean id="alertService"
		class="com.ljw.spring.mybits.alerts.AlertServiceImpl">
		<constructor-arg ref="jmsTemplate"></constructor-arg>	
	</bean>
	
	
	
	<!-- ================================================================================================ -->
	<!-- 文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="102400"></property>
		<property name="resolveLazily" value="true"></property>
	</bean>
	
	
	
	
</beans>